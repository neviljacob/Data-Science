import numpy as np
import pandas as pd
from sklearn import datasets
iris=pd.read_csv('E:\DataScience\Iris.csv')
#formating of datasets
X=iris.iloc[:,:4]
y=iris.iloc[:,-1]
#normazlize the datsets
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler().fit(X)
#split the dataset into train and test
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=50)
#Naive-Bayes using Categorical
from sklearn.naive_bayes import CategoricalNB
gnb=CategoricalNB()
gnb.fit(X_train,y_train)
pred=gnb.predict(X_test)

#accuracy_score confusion_matrix
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
print(accuracy_score(y_test,pred))
print(confusion_matrix(y_test,pred))
print(classification_report(y_test,pred))

#Naive-Bayes using BernoulliNB
from sklearn.naive_bayes import BernoulliNB
gnb=BernoulliNB()
gnb.fit(X_train,y_train)
pred=gnb.predict(X_test)

#accuracy_score confusion_matrix
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
print(accuracy_score(y_test,pred))
print(confusion_matrix(y_test,pred))
print(classification_report(y_test,pred))

#Naive-Bayes using GaussianNB
from sklearn.naive_bayes import GaussianNB
gnb=GaussianNB()
gnb.fit(X_train,y_train)
pred=gnb.predict(X_test)

#accuracy_score confusion_matrix
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
print(accuracy_score(y_test,pred))
print(confusion_matrix(y_test,pred))
print(classification_report(y_test,pred))
